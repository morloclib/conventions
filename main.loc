module conventions


export id
export seq
export show
-- tuple functions
export fst
export snd
export tuple
export curry
export uncurry
export at
export mapFst
export mapSnd
export toFst
export toSnd
-- pairlists
export zip
export unzip
export keys
export vals
-- functions over pairlists
export filterKey
export filterVal
export mapVal
export mapKey
export withKeys
export withVals
-- context filtering
export contextFilterKey
export contextFilterVal
-- functional tools
export flip
export until
-- foldable functions - replace once I get typeclasses working
export length
export reverse
export concat
export concatMap
-- list creation
export replicate
-- general list processing
export head
export last
export tail
export init
export get
export take
export drop
export takeWhile
export dropWhile
export span
export break
export splitAt
-- string processing
export lines
export words
export unlines
export unwords
-- accumulating folds
export scanl
export scanr
export scanl1
export scanr1
-- arithmetic operators - these are all
export add
export sub
export mul
export div
export mod
-- hofs
export map
export zipWith
export fold
export enumerateWith

id :: a -> a
seq :: a -> b -> b
const :: a -> b -> a

-- tuple functions
fst :: (a, b) -> a
snd :: (a, b) -> b
tuple :: a -> b -> (a, b)
curry :: ((a, b) -> c) -> a -> b -> c
uncurry :: (a -> b -> c) -> (a, b) -> c

mapSnd :: (b -> b') -> (a, b) -> (a, b')
mapFst :: (a -> a') -> (a, b) -> (a', b)

toSnd :: (a -> b) -> a -> (a, b)
toFst :: (a -> b) -> a -> (b, a)

-- list operations
at :: [a] -> Int -> a

-- pairlists
zip :: [a] -> [b] -> [(a, b)]
unzip :: [(a, b)] -> ([a], [b])


keys :: [(a, b)] -> [a]
keys = map fst

vals :: [(a, b)] -> [b]
vals = map snd

-- -- functions over pairlists
filterKey :: (a -> Bool) -> [(a, b)] -> [(a, b)]
-- filterKey f = filter (f . fst) xs
-- I should remove this, I just need to add a composition operator
filterVal :: (b -> Bool) -> [(a, b)] -> [(a, b)]


withKeys :: ([a] -> [b]) -> [(a, c)] -> [(b, c)]
withKeys f xs = zip (f (map fst xs)) (map snd xs)

withVals :: ([a] -> [b]) -> [(c, a)] -> [(c, b)]

mapVal :: (a -> b) -> [(c, a)] -> [(c, b)]
mapKey :: (a -> b) -> [(a, c)] -> [(b, c)]
-- mapKey f = map (onFst f)


-- conversions
show :: a -> Str

-- -- Laws
-- withVals id xs == xs
-- withKeys id xs == xs
-- mapVal id xs == xs
-- mapKey id xs == xs
-- filterVal true xs == xs
-- filterVal false xs == []
-- filterKey true xs == xs
-- filterKey false xs == []

contextFilterKey :: (a -> b -> (a, Bool)) -> a -> [(b,c)] -> [(b,c)]
contextFilterVal :: (a -> b -> (a, Bool)) -> a -> [(c,b)] -> [(c,b)]

-- functional tools
flip :: (a -> b -> c) -> b -> a -> c
until :: (a -> Bool) -> (a -> a) -> a -> a

-- foldable functions - replace once I get typeclasses working
length :: [a] -> Int
reverse :: [a] -> [a]
concat :: [[a]] -> [a]
concatMap :: (a -> [b]) -> [a] -> [b]

-- list creation
replicate :: Int -> a -> [a]

-- general list processing
head :: [a] -> a -- [1,2,3] => 1
last :: [a] -> a -- [1,2,3] => 3
tail :: [a] -> [a] -- [1,2,3] => [2,3]
init :: [a] -> [a] -- [1,2,3] => [1,2]
get :: Int -> [a] -> a -- get 1 [1,2,3] => 2
take :: Int -> [a] -> [a]
drop :: Int -> [a] -> [a]
takeWhile :: (a -> Bool) -> [a] -> [a]
dropWhile :: (a -> Bool) -> [a] -> [a]
span :: (a -> Bool) -> [a] -> ([a], [a])
break :: (a -> Bool) -> [a] -> ([a], [a])
splitAt :: Int -> [a] -> ([a], [a])

-- string processing
lines :: Str -> [Str]
words :: Str -> [Str]
unlines :: [Str] -> Str
unwords :: [Str] -> Str

-- accumulating folds
scanl :: (b -> a -> b) -> b -> [a] -> [b]
scanr :: (a -> b -> b) -> b -> [a] -> [b]
scanl1 :: (a -> a -> a) -> [a] -> [a]
scanr1 :: (a -> a -> a) -> [a] -> [a]


-- NOTE: After a system for numeric casting is added to morloc, replace the
-- concrete arithmetic operators below with qualified types, e.g.:
-- add :: Real -> Real -> Real
-- add Cpp :: a -> a -> a
-- Or maybe
-- add Cpp :: a -> b -> c
-- So this is complicated ... if the two inputs to add can be of different
-- types, say int and double, then what is the return type? For add, the return
-- type would need to be decided based on a function of the input types. But these
-- types will depend on the function. I will need to research this problem ...
--
-- As a temporary measure, I will leave the types as "double". On the C++ side
-- in core.hpp, they are all implemented as fully generalized templates of three
-- independent types.

-- arithmetic operators - these are all
-- add :: (Real a) => a -> a -> a
add :: Real -> Real -> Real

-- sub :: (Real a) => a -> a -> a
sub :: Real -> Real -> Real

-- mul :: (Real a) => a -> a -> a
mul :: Real -> Real -> Real

-- div :: (Real a) => a -> a -> a
div :: Real -> Real -> Real

-- mod :: (Real a) => a -> a -> a
mod :: Real -> Real -> Real


map :: (a -> b) -> [a] -> [b]

zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

fold :: (b -> a -> b) -> b -> [a] -> b

enumerateWith :: (a -> Int -> b) -> [a] -> [b]
