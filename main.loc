module conventions (*)

import types
import prelude


-- {-
--
-- This package is too big. It is hard to draw a line at what fits in and what
-- doesn't. So much depends on domain. So it may make more sense to break
-- everything down into smaller packages.
--
--  * math
--  * stat
--  * ml
--  * combinators
--  * containers
--    * list
--    * tuple
--    * map
--    * set
--    * maybe
--    * either
--  * binary
--  * string
--  * text
--
-- -}

------------- Effects
sleep :: Real -> a -> a

------------- Control
-- Whether this is eager or lazy depends on language
ifelse :: Bool -> a -> a -> a
-- like ifelse, but guaranteed to be lazy
branch :: (a -> Bool) -> (a -> b) -> (a -> b) -> a -> b
run :: (() -> a) -> a

------------- Combinators and functions
id :: a -> a
seq :: a -> b -> b
const :: a -> b -> a
fst :: (a, b) -> a
snd :: (a, b) -> b

{- While I don't want to make special accessors for every damn tuple, triples
are special. They represent relations between things. I am tempted to names
these three functions (s, p, and o) for "subject", "predicate", and
"object". This is the convention in SPARQL circles. Anyone who wants to think of
them that way, though, is free to use aliases. In the meantime, I will give them
unopinionated names. -}
fst3 :: (a, b, c) -> a
snd3 :: (a, b, c) -> b
thr3 :: (a, b, c) -> c

tuple :: a -> b -> (a, b)
curry :: ((a, b) -> c) -> a -> b -> c
uncurry :: (a -> b -> c) -> (a, b) -> c
onSnd :: (b -> b') -> (a, b) -> (a, b')
onFst :: (a -> a') -> (a, b) -> (a', b)
toSnd :: (a -> b) -> a -> (a, b)
toFst :: (a -> b) -> a -> (b, a)

------------- Strings
show :: a -> Str
unlines :: [Str] -> Str
words :: Str -> [Str]
unwords :: [Str] -> Str
paste :: Str -> [Str] -> Str
lines :: Str -> [Str]
lengthS :: Str -> Int



------------- Lists
-- -- Laws
-- withVals id xs == xs
-- withKeys id xs == xs
-- mapVal id xs == xs
-- mapKey id xs == xs
-- filterVal true xs == xs
-- filterVal false xs == []

at :: [a] -> Int -> a
break :: (a -> Bool) -> [a] -> ([a], [a])
concat :: [[a]] -> [a]
conmap :: (a -> [b]) -> [a] -> [b]
contextFilterKey :: (a -> b -> (a, Bool)) -> a -> [(b,c)] -> [(b,c)]
contextFilterVal :: (a -> b -> (a, Bool)) -> a -> [(c,b)] -> [(c,b)]
drop :: Int -> [a] -> [a]
dropWhile :: (a -> Bool) -> [a] -> [a]
enumerateWith :: (a -> Int -> b) -> [a] -> [b]
flip :: (a -> b -> c) -> b -> a -> c
fold :: (b -> a -> b) -> b -> [a] -> b
get :: Int -> [a] -> a -- get 1 [1,2,3] => 2
head :: [a] -> a -- [1,2,3] => 1
init :: [a] -> [a] -- [1,2,3] => [1,2]
join :: [a] -> [a] -> [a]
cons :: a -> [a] -> [a]
append :: [a] -> a -> [a]
last :: [a] -> a -- [1,2,3] => 3
length :: [a] -> Int
lookup :: k -> [(k, v)] -> v
map :: (a -> b) -> [a] -> [b]
filter :: (a -> Bool) -> [a] -> [a]
replicate :: Int -> a -> [a]
reverse :: [a] -> [a]
scanl :: (b -> a -> b) -> b -> [a] -> [b]
scanl1 :: (a -> a -> a) -> [a] -> [a]
scanr :: (a -> b -> b) -> b -> [a] -> [b]
scanr1 :: (a -> a -> a) -> [a] -> [a]
shard :: Int -> [a] -> [[a]]
span :: (a -> Bool) -> [a] -> ([a], [a])
splitAt :: Int -> [a] -> ([a], [a])
tail :: [a] -> [a] -- [1,2,3] => [2,3]
take :: Int -> [a] -> [a]
takeWhile :: (a -> Bool) -> [a] -> [a]
unique :: [a] -> [a]
until :: (a -> Bool) -> (a -> a) -> a -> a
unzip :: [(a, b)] -> ([a], [b])
withFsts :: ([a] -> [b]) -> [(a, c)] -> [(b, c)]
withSnds :: ([a] -> [b]) -> [(c, a)] -> [(c, b)]
zip :: [a] -> [b] -> [(a, b)]
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
elem :: a -> [a] -> Bool

------------- Maps

keys :: Map a b -> [a]
vals :: Map a b -> [b]
mapKey :: (a -> a') -> Map a b -> Map a' b 
mapVal :: (b -> b') -> Map a b -> Map a b'
filterKey :: (k -> Bool) -> Map k v -> Map k v
filterVal :: (v -> Bool) -> Map k v -> Map k v
readMap :: Filename -> Map Str Str
